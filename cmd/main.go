// Programa de proves per a instÃ ncies de RangeF64.
// CreatedAt: 2024/12/12 dj. JIQ

package main

import (
	"fmt"
	"math"

	"github.com/jibort/ld_mcac/internal/core"
)

func main() {
	fmt.Println("Tests de RangeF64 suma group A + percentage")
	testCases := []struct {
		name string
		in   float64
		perc float64
		out  float64
	}{
		{"0.5 +10%", 0.5, 0.1, 0.55},
		{"0.5 +10%", 0.5, 0.11, 0.555},
		{"-0.5 +10%", -0.5, 0.1, -0.55},
		{"-0.5 +10%", -0.5, 0.11, -0.555},
		{"0.35 +33%", 0.35, 0.33, 0.4655},
		{"-0.35 +33.33333333%", 0.35, 0.33333333, -0.4666666655},
	}

	for idx, tc := range testCases {
		fIn := tc.in
		r64 := core.NewRangeF64(fIn)
		fPer := tc.perc
		p64 := core.NewRangeF64Percentage(fPer)
		sum := r64.Add(p64)
		rPer, _ := p64.GetPercentage()
		fSum := sum.GetF64Value()
		fmt.Printf("%3d: name: '%s' > A: '%.10f', Perc: '%.10f' Out: %.10f, Sum: %.10f\n", idx, tc.name, fIn, rPer, tc.out, fSum)
		if math.Abs(fSum)-math.Abs(tc.out) > core.Epsilon64 {
			fmt.Printf("ERROR en cas %3d\n", idx)
		}
	}
}

func main_B() {
	fmt.Println("Tests de RangeF64 Percentage (group C - Subgroup '00')")
	testCases := []struct {
		name string
		in   float64
		out  float64
	}{
		{"Test 0.0%", 0.000000000000000, 0.000000000000000},
		{"Test 0.000000000000009%", 0.000000000000009, 0.000000000000009},
		{"Test 0.0000000000000099%", 0.0000000000000099, 0.0000000000000089},
		{"Test 0.1%", 0.1, 0.1},
		{"Test 0.19%", 0.19, 0.19},
		{"Test 0.199%", 0.199, 0.199},
		{"Test 0.1999%", 0.1999, 0.1999},
		{"Test 0.19999%", 0.19999, 0.19999},
		{"Test 0.199999%", 0.199999, 0.199999},
		{"Test 0.1999999%", 0.1999999, 0.1999999},
		{"Test 0.19999999%", 0.19999999, 0.19999999},
		{"Test 0.199999999%", 0.199999999, 0.199999999},
		{"Test 0.1999999999%", 0.1999999999, 0.1999999999},
		{"Test 0.19999999999%", 0.19999999999, 0.19999999999},
		{"Test 0.199999999999%", 0.199999999999, 0.199999999999},
		{"Test 0.1999999999999%", 0.1999999999999, 0.1999999999999},
		{"Test 0.19999999999999%", 0.19999999999999, 0.19999999999999},
		{"Test 0.199999999999999%", 0.199999999999999, 0.199999999999999},
		{"Test 0.1999999999999999%", 0.1999999999999999, 0.1999999999999999},
		{"Test 0.0999999999999999%", 0.0999999999999999, 0.0999999999999999},
		{"Test 0.9999999999999999%", 0.9999999999999999, 0.9999999999999999},
		{"Test 1.0000000000000000%", 1.0000000000000000, 1.0000000000000000},
	}

	for idx, tc := range testCases {
		fIn := tc.in
		inLen := len(fmt.Sprintf("%f", fIn))
		r64 := core.NewRangeF64Percentage(fIn)
		fOut, _ := r64.GetPercentage()
		fmt.Printf("%3d: name: '%s' > Len: %d, IN: '%.15f', OUT: '%.15f'\n", idx, tc.name, inLen, fIn, fOut)
		if math.Abs(fIn)-math.Abs(fOut) > core.Epsilon64 {
			fmt.Printf("ERROR en cas %3d\n", idx)
		}
	}
}

func main_A() {
	fmt.Println("Tests de NewRangeF64FromU64()")

	testCases := []struct {
		name string
		in   float64
		out  float64
	}{
		{"Test 0.000000000000000", 0.000000000000000, 0.000000000000000},
		{"Test 0.000000000000009", 0.000000000000009, 0.000000000000009},
		{"Test 0.0000000000000099", 0.0000000000000099, 0.0000000000000089},
		{"Test 0.1", 0.1, 0.1},
		{"Test 0.19", 0.19, 0.19},
		{"Test 0.199", 0.199, 0.199},
		{"Test 0.1999", 0.1999, 0.1999},
		{"Test 0.19999", 0.19999, 0.19999},
		{"Test 0.199999", 0.199999, 0.199999},
		{"Test 0.1999999", 0.1999999, 0.1999999},
		{"Test 0.19999999", 0.19999999, 0.19999999},
		{"Test 0.199999999", 0.199999999, 0.199999999},
		{"Test 0.1999999999", 0.1999999999, 0.1999999999},
		{"Test 0.19999999999", 0.19999999999, 0.19999999999},
		{"Test 0.199999999999", 0.199999999999, 0.199999999999},
		{"Test 0.1999999999999", 0.1999999999999, 0.1999999999999},
		{"Test 0.19999999999999", 0.19999999999999, 0.19999999999999},
		{"Test 0.199999999999999", 0.199999999999999, 0.199999999999999},
		{"Test 0.1999999999999999", 0.1999999999999999, 0.1999999999999999},
		{"Test 0.0999999999999999", 0.0999999999999999, 0.0999999999999999},
		{"Test 0.9999999999999999", 0.9999999999999999, 0.9999999999999999},
		{"Test -0.000000000000000", -0.000000000000000, -0.000000000000000},
		{"Test -0.000000000000009", -0.000000000000009, -0.000000000000009},
		{"Test -0.0000000000000099", -0.0000000000000099, -0.0000000000000089},
		{"Test -0.1", -0.1, -0.1},
		{"Test -0.19", -0.19, -0.19},
		{"Test -0.199", -0.199, -0.199},
		{"Test -0.1999", -0.1999, -0.1999},
		{"Test -0.19999", -0.19999, -0.19999},
		{"Test -0.199999", -0.199999, -0.199999},
		{"Test -0.1999999", -0.1999999, -0.1999999},
		{"Test -0.19999999", -0.19999999, -0.19999999},
		{"Test -0.199999999", -0.199999999, -0.199999999},
		{"Test -0.1999999999", -0.1999999999, -0.1999999999},
		{"Test -0.19999999999", -0.19999999999, -0.19999999999},
		{"Test -0.199999999999", -0.199999999999, -0.199999999999},
		{"Test -0.1999999999999", -0.1999999999999, -0.1999999999999},
		{"Test -0.19999999999999", -0.19999999999999, -0.19999999999999},
		{"Test -0.199999999999999", -0.199999999999999, -0.199999999999999},
		{"Test -0.1999999999999999", -0.1999999999999999, -0.1999999999999999},
		{"Test -0.0999999999999999", -0.0999999999999999, -0.0999999999999999},
		{"Test -0.9999999999999999", -0.9999999999999999, -0.9999999999999999},
	}

	for idx, tc := range testCases {
		fIn := tc.in
		r64 := core.NewRangeF64FromU64(core.F64ToU64(fIn))
		fOut := r64.GetF64Value()
		fmt.Printf("%3d: name: '%s' > IN: '%.15f', OUT: '%.15f'\n", idx, tc.name, fIn, fOut)
		if math.Abs(fIn)-math.Abs(fOut) > core.Epsilon64 {
			fmt.Printf("ERROR en cas %3d\n", idx)
		}
	}
}
